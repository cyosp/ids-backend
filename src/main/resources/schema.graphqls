type Query {
    list(directory: ID, directoryReversedOrder: Boolean, previewDirectoryReversedOrder: Boolean): [FileSystemElement]
    getMedias(directory: ID, media: String!): [Media]
    getMedia(media: ID!): Media
    users: [User]
}

interface FileSystemElement {
    __typename: String
    id: ID!
    name: String
}

type Directory implements FileSystemElement {
    __typename: String
    id: ID!
    name: String
    preview: Media
    elements: [FileSystemElement]
}

interface Media implements FileSystemElement {
     __typename: String
    id: ID!
    name: String
    urlPath: String
    previewUrlPath: String
    thumbnailUrlPath: String
    metadata: Metadata
}

type Image implements Media, FileSystemElement {
    __typename: String
    id: ID!
    name: String
    urlPath: String
    previewUrlPath: String
    thumbnailUrlPath: String
    metadata: Metadata
}

type Video implements Media, FileSystemElement {
    __typename: String
    id: ID!
    name: String
    urlPath: String
    previewUrlPath: String
    thumbnailUrlPath: String
    metadata: Metadata
}

type Metadata {
    takenAt: String
}

enum Role {
    ADMINISTRATOR
    VIEWER
}

type User {
    id: ID
    email: String
    role: Role
}

type Mutation {
    generateAlternativeFormats(directory: ID, forceThumbnailGeneration: Boolean): [Media]
    changePassword(password: String!, newPassword: String!): User
    deleteMedia(media: ID!): Media
}
